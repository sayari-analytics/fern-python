# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
import uuid
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PrimitiveClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_and_return_string(self, *, request: str) -> str:
        """
        Parameters:
            - request: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/string"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_and_return_int(self, *, request: int) -> int:
        """
        Parameters:
            - request: int.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/integer"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(int, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_and_return_long(self, *, request: int) -> int:
        """
        Parameters:
            - request: int.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/long"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(int, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_and_return_double(self, *, request: float) -> float:
        """
        Parameters:
            - request: float.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/double"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(float, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_and_return_bool(self, *, request: bool) -> bool:
        """
        Parameters:
            - request: bool.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/boolean"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(bool, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_and_return_datetime(self, *, request: dt.datetime) -> dt.datetime:
        """
        Parameters:
            - request: dt.datetime.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/datetime"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(dt.datetime, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_and_return_date(self, *, request: dt.date) -> dt.date:
        """
        Parameters:
            - request: dt.date.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/date"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(dt.date, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_and_return_uuid(self, *, request: uuid.UUID) -> uuid.UUID:
        """
        Parameters:
            - request: uuid.UUID.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/uuid"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(uuid.UUID, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_and_return_base_64(self, *, request: str) -> str:
        """
        Parameters:
            - request: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/base64"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPrimitiveClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_and_return_string(self, *, request: str) -> str:
        """
        Parameters:
            - request: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/string"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_and_return_int(self, *, request: int) -> int:
        """
        Parameters:
            - request: int.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/integer"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(int, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_and_return_long(self, *, request: int) -> int:
        """
        Parameters:
            - request: int.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/long"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(int, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_and_return_double(self, *, request: float) -> float:
        """
        Parameters:
            - request: float.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/double"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(float, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_and_return_bool(self, *, request: bool) -> bool:
        """
        Parameters:
            - request: bool.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/boolean"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(bool, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_and_return_datetime(self, *, request: dt.datetime) -> dt.datetime:
        """
        Parameters:
            - request: dt.datetime.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/datetime"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(dt.datetime, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_and_return_date(self, *, request: dt.date) -> dt.date:
        """
        Parameters:
            - request: dt.date.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/date"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(dt.date, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_and_return_uuid(self, *, request: uuid.UUID) -> uuid.UUID:
        """
        Parameters:
            - request: uuid.UUID.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/uuid"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(uuid.UUID, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_and_return_base_64(self, *, request: str) -> str:
        """
        Parameters:
            - request: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "primitive/base64"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=5,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
