# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .ec_2._client import AsyncEc2Client, Ec2Client
from .environment import SeedMultiUrlEnvironmentEnvironment
from .s_3._client import AsyncS3Client, S3Client


class SeedMultiUrlEnvironment:
    def __init__(
        self,
        *,
        environment: SeedMultiUrlEnvironmentEnvironment = SeedMultiUrlEnvironmentEnvironment.PRODUCTION,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            environment=environment,
            token=token,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.ec_2 = Ec2Client(client_wrapper=self._client_wrapper)
        self.s_3 = S3Client(client_wrapper=self._client_wrapper)


class AsyncSeedMultiUrlEnvironment:
    def __init__(
        self,
        *,
        environment: SeedMultiUrlEnvironmentEnvironment = SeedMultiUrlEnvironmentEnvironment.PRODUCTION,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            environment=environment,
            token=token,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.ec_2 = AsyncEc2Client(client_wrapper=self._client_wrapper)
        self.s_3 = AsyncS3Client(client_wrapper=self._client_wrapper)
