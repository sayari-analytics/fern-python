# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..submission.submission_id import SubmissionId
from ..submission.test_case_result_with_stdout import TestCaseResultWithStdout
from ..submission.test_submission_status import TestSubmissionStatus
from ..submission.test_submission_update import TestSubmissionUpdate
from ..submission.trace_response import TraceResponse
from ..submission.trace_response_v_2 import TraceResponseV2
from ..submission.workspace_run_details import WorkspaceRunDetails
from ..submission.workspace_submission_status import WorkspaceSubmissionStatus
from ..submission.workspace_submission_update import WorkspaceSubmissionUpdate
from ..v_2.problem.test_case_id import TestCaseId

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def update_test_submission_status(self, submission_id: SubmissionId, *, request: TestSubmissionStatus) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: TestSubmissionStatus.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-test-submission-status/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_test_submission_update(self, submission_id: SubmissionId, *, request: TestSubmissionUpdate) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: TestSubmissionUpdate.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-test-submission-status-v2/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_workspace_submission_status(
        self, submission_id: SubmissionId, *, request: WorkspaceSubmissionStatus
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: WorkspaceSubmissionStatus.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-workspace-submission-status/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_workspace_submission_update(
        self, submission_id: SubmissionId, *, request: WorkspaceSubmissionUpdate
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: WorkspaceSubmissionUpdate.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-workspace-submission-status-v2/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def store_traced_test_case(
        self,
        submission_id: SubmissionId,
        test_case_id: str,
        *,
        result: TestCaseResultWithStdout,
        trace_responses: typing.List[TraceResponse],
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - test_case_id: str.

            - result: TestCaseResultWithStdout.

            - trace_responses: typing.List[TraceResponse].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-trace/submission/{submission_id}/testCase/{test_case_id}",
            ),
            json=jsonable_encoder({"result": result, "traceResponses": trace_responses}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def store_traced_test_case_v_2(
        self, submission_id: SubmissionId, test_case_id: TestCaseId, *, request: typing.List[TraceResponseV2]
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - test_case_id: TestCaseId.

            - request: typing.List[TraceResponseV2].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-trace-v2/submission/{submission_id}/testCase/{test_case_id}",
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def store_traced_workspace(
        self,
        submission_id: SubmissionId,
        *,
        workspace_run_details: WorkspaceRunDetails,
        trace_responses: typing.List[TraceResponse],
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - workspace_run_details: WorkspaceRunDetails.

            - trace_responses: typing.List[TraceResponse].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-workspace-trace/submission/{submission_id}"
            ),
            json=jsonable_encoder({"workspaceRunDetails": workspace_run_details, "traceResponses": trace_responses}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def store_traced_workspace_v_2(self, submission_id: SubmissionId, *, request: typing.List[TraceResponseV2]) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: typing.List[TraceResponseV2].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-workspace-trace-v2/submission/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def update_test_submission_status(
        self, submission_id: SubmissionId, *, request: TestSubmissionStatus
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: TestSubmissionStatus.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-test-submission-status/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_test_submission_update(self, submission_id: SubmissionId, *, request: TestSubmissionUpdate) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: TestSubmissionUpdate.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-test-submission-status-v2/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_workspace_submission_status(
        self, submission_id: SubmissionId, *, request: WorkspaceSubmissionStatus
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: WorkspaceSubmissionStatus.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-workspace-submission-status/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_workspace_submission_update(
        self, submission_id: SubmissionId, *, request: WorkspaceSubmissionUpdate
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: WorkspaceSubmissionUpdate.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-workspace-submission-status-v2/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def store_traced_test_case(
        self,
        submission_id: SubmissionId,
        test_case_id: str,
        *,
        result: TestCaseResultWithStdout,
        trace_responses: typing.List[TraceResponse],
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - test_case_id: str.

            - result: TestCaseResultWithStdout.

            - trace_responses: typing.List[TraceResponse].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-trace/submission/{submission_id}/testCase/{test_case_id}",
            ),
            json=jsonable_encoder({"result": result, "traceResponses": trace_responses}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def store_traced_test_case_v_2(
        self, submission_id: SubmissionId, test_case_id: TestCaseId, *, request: typing.List[TraceResponseV2]
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - test_case_id: TestCaseId.

            - request: typing.List[TraceResponseV2].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-trace-v2/submission/{submission_id}/testCase/{test_case_id}",
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def store_traced_workspace(
        self,
        submission_id: SubmissionId,
        *,
        workspace_run_details: WorkspaceRunDetails,
        trace_responses: typing.List[TraceResponse],
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - workspace_run_details: WorkspaceRunDetails.

            - trace_responses: typing.List[TraceResponse].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-workspace-trace/submission/{submission_id}"
            ),
            json=jsonable_encoder({"workspaceRunDetails": workspace_run_details, "traceResponses": trace_responses}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def store_traced_workspace_v_2(
        self, submission_id: SubmissionId, *, request: typing.List[TraceResponseV2]
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: typing.List[TraceResponseV2].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"admin/store-workspace-trace-v2/submission/{submission_id}"
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
