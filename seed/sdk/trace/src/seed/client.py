# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .admin._client import AdminClient, AsyncAdminClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import SeedTraceEnvironment
from .homepage._client import AsyncHomepageClient, HomepageClient
from .migration._client import AsyncMigrationClient, MigrationClient
from .playlist._client import AsyncPlaylistClient, PlaylistClient
from .problem._client import AsyncProblemClient, ProblemClient
from .submission._client import AsyncSubmissionClient, SubmissionClient
from .sysprop._client import AsyncSyspropClient, SyspropClient
from .v_2._client import AsyncV2Client, V2Client


class SeedTrace:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SeedTraceEnvironment = SeedTraceEnvironment.PROD,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            x_random_header=x_random_header,
            token=token,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.v_2 = V2Client(client_wrapper=self._client_wrapper)
        self.admin = AdminClient(client_wrapper=self._client_wrapper)
        self.homepage = HomepageClient(client_wrapper=self._client_wrapper)
        self.migration = MigrationClient(client_wrapper=self._client_wrapper)
        self.playlist = PlaylistClient(client_wrapper=self._client_wrapper)
        self.problem = ProblemClient(client_wrapper=self._client_wrapper)
        self.submission = SubmissionClient(client_wrapper=self._client_wrapper)
        self.sysprop = SyspropClient(client_wrapper=self._client_wrapper)


class AsyncSeedTrace:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SeedTraceEnvironment = SeedTraceEnvironment.PROD,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            x_random_header=x_random_header,
            token=token,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.v_2 = AsyncV2Client(client_wrapper=self._client_wrapper)
        self.admin = AsyncAdminClient(client_wrapper=self._client_wrapper)
        self.homepage = AsyncHomepageClient(client_wrapper=self._client_wrapper)
        self.migration = AsyncMigrationClient(client_wrapper=self._client_wrapper)
        self.playlist = AsyncPlaylistClient(client_wrapper=self._client_wrapper)
        self.problem = AsyncProblemClient(client_wrapper=self._client_wrapper)
        self.submission = AsyncSubmissionClient(client_wrapper=self._client_wrapper)
        self.sysprop = AsyncSyspropClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SeedTraceEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
