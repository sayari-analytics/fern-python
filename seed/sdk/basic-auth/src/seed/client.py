# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .basic_auth._client import AsyncBasicAuthClient, BasicAuthClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper


class SeedBasicAuth:
    def __init__(
        self,
        *,
        base_url: str,
        username: typing.Union[str, typing.Callable[[], str]],
        password: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            username=username,
            password=password,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.basic_auth = BasicAuthClient(client_wrapper=self._client_wrapper)


class AsyncSeedBasicAuth:
    def __init__(
        self,
        *,
        base_url: str,
        username: typing.Union[str, typing.Callable[[], str]],
        password: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            username=username,
            password=password,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.basic_auth = AsyncBasicAuthClient(client_wrapper=self._client_wrapper)
